stages:
  - test
  - build

default:
    before_script:
    ## NOTE: Because the SSH_PRIVATE_KEY variable is protected the git branch
    ##       needs to be protected to access it. If the branch is not protected
    ##       this will fail.
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "${SSH_PRIVATE_KEY}" | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan ausvotes.org >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Install any additional R Packages
        - R -e 'install.packages(c("DT"))'

test:
  image: rocker/tidyverse:4.2.2
  stage: test
  script:
    - R CMD build . --no-build-vignettes --no-manual
    - R CMD check *.tar.gz --no-build-vignettes --no-manual
  artifacts:
    paths:
    - '*.tar.gz'

buildbinarynew:
  image: rocker/tidyverse:4.2.2
  stage: build
  script:
    - "Rscript -e \"roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))\""
    - R -e 'devtools::build(binary = TRUE, vignettes = TRUE, path = "./")'
    - PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1)
    - scp "${PKG_FILE_NAME}" damon@ausvotes.org:packages/
  artifacts:
    paths:
    - '*.tar.gz'

